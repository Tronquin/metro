@import "../base/variables";
@import "../base/queries";
@import "../components/typography";
@import "../base/fonts";

$bookTableColumns: ("image", "isbn", "title", "year", "pages", "controls");
$bookTableColumnWidth: ("233px", "150px", "150px", "150px", "150px", "150px");
$bookTableColumnCount: length($bookTableColumns);
$bookGridAreas: "image isbn title year pages controls";
$book: (
  "columns": $bookTableColumns,
  "columnWidth": $bookTableColumnWidth,
  "columnCount": $bookTableColumnCount,
  "gridAreas": $bookGridAreas
);

$workTableColumns: ("library", "copyId", "title", "isbn", "destrinationLibrary", "checkoutDate", "pickedUp");
$workTableColumnWidth: ("150px", "150px", "150px", "150px", "150px", "150px", "150px");
$workTableColumnCount: length($workTableColumns);
$workGridAreas: "library copyId title isbn destrinationLibrary checkoutDate pickedUp";
$work: (
  "columns": $workTableColumns,
  "columnWidth": $workTableColumnWidth,
  "columnCount": $workTableColumnCount,
  "gridAreas": $workGridAreas
);

$transitTableColumns: ("estimatedArrival", "actualArrival", "library", "checkout", "copy", "controls");
$transitTableColumnWidth: ("150px", "150px", "150px", "150px", "150px", "150px");
$transitTableColumnCount: length($transitTableColumns);
$transitGridAreas: "estimatedArrival actualArrival library checkout copy controls";
$transit: (
  "columns": $transitTableColumns,
  "columnWidth": $transitTableColumnWidth,
  "columnCount": $transitTableColumnCount,
  "gridAreas": $transitGridAreas
);

$copyTableColumns: ("copyId", "checkout", "library", "isbn", "controls");
$copyTableColumnWidth: ("150px", "150px", "150px", "150px", "150px");
$copyTableColumnCount: length($copyTableColumns);
$copyGridAreas: "copyId checkout library isbn controls";
$copy: (
  "columns": $copyTableColumns,
  "columnWidth": $copyTableColumnWidth,
  "columnCount": $copyTableColumnCount,
  "gridAreas": $copyGridAreas
);

$waitlistTableColumns: ("id", "position", "copyId", "checkoutId", "isbnId", "insertedAt", "updatedAt");
$waitlistTableColumnWidth: ("150px", "150px", "150px", "150px", "150px", "150px", "150px");
$waitlistTableColumnCount: length($waitlistTableColumns);
$waitlistGridAreas: "id position copyId checkoutId isbnId insertedAt updatedAt";
$waitlist: (
  "columns": $waitlistTableColumns,
  "columnWidth": $waitlistTableColumnWidth,
  "columnCount": $waitlistTableColumnCount,
  "gridAreas": $waitlistGridAreas
);

$checkoutTableColumns: (
  "id",
  "renewalsRemaining",
  "checkoutDate",
  "checkinDate",
  "dueDate",
  "card",
  "copyId",
  "isbn",
  "library"
);
$checkoutTableColumnWidth: ("50px", "150px", "150px", "150px", "150px", "50px", "50px", "150px", "50px");
$checkoutTableColumnCount: length($checkoutTableColumns);
$checkoutGridAreas: "id renewalsRemaining checkoutDate checkinDate dueDate card copyId isbn library";
$checkout: (
  "columns": $checkoutTableColumns,
  "columnWidth": $checkoutTableColumnWidth,
  "columnCount": $checkoutTableColumnCount,
  "gridAreas": $checkoutGridAreas
);

$profileCheckoutTableColumns: ("renewalsRemaining", "checkoutDate", "dueDate", "isbn");
$profileCheckoutTableColumnWidth: ("150px", "150px", "150px", "150px");
$profileCheckoutTableColumnCount: length($profileCheckoutTableColumns);
$profileCheckoutGridAreas: "renewalsRemaining checkoutDate dueDate isbn";
$profileCheckout: (
  "columns": $profileCheckoutTableColumns,
  "columnWidth": $profileCheckoutTableColumnWidth,
  "columnCount": $profileCheckoutTableColumnCount,
  "gridAreas": $profileCheckoutGridAreas
);

$profilePickupTableColumns: ("expirationDate", "library", "isbn");
$profilePickupTableColumnWidth: ("150px", "150px", "150px");
$profilePickupTableColumnCount: length($profilePickupTableColumns);
$profilePickupGridAreas: "expirationDate library isbn";
$profilePickup: (
  "columns": $profilePickupTableColumns,
  "columnWidth": $profilePickupTableColumnWidth,
  "columnCount": $profilePickupTableColumnCount,
  "gridAreas": $profilePickupGridAreas
);

$profileTransitTableColumns: ("image", "estimatedArrival", "library", "isbn");
$profileTransitTableColumnWidth: ("150px", "150px", "150px", "150px");
$profileTransitTableColumnCount: length($profileTransitTableColumns);
$profileTransitGridAreas: "image estimatedArrival library isbn";
$profileTransit: (
  "columns": $profileTransitTableColumns,
  "columnWidth": $profileTransitTableColumnWidth,
  "columnCount": $profileTransitTableColumnCount,
  "gridAreas": $profileTransitGridAreas
);

$profileWaitlistTableColumns: ("position", "isbn");
$profileWaitlistTableColumnWidth: ("150px", "150px");
$profileWaitlistTableColumnCount: length($profileWaitlistTableColumns);
$profileWaitlistGridAreas: "position isbn";
$profileWaitlist: (
  "columns": $profileWaitlistTableColumns,
  "columnWidth": $profileWaitlistTableColumnWidth,
  "columnCount": $profileWaitlistTableColumnCount,
  "gridAreas": $profileWaitlistGridAreas
);

$profilePrevCheckoutTableColumns: ("position", "isbn");
$profilePrevCheckoutTableColumnWidth: ("150px", "150px");
$profilePrevCheckoutTableColumnCount: length($profilePrevCheckoutTableColumns);
$profilePrevCheckoutGridAreas: "position isbn";
$profilePrevCheckout: (
  "columns": $profilePrevCheckoutTableColumns,
  "columnWidth": $profilePrevCheckoutTableColumnWidth,
  "columnCount": $profilePrevCheckoutTableColumnCount,
  "gridAreas": $profilePrevCheckoutGridAreas
);

$userListTableColumns: ("name", "email", "fines", "isLibrarian", "numOfBooksOut", "controls");
$userListTableColumnWidth: ("150px", "150px", "150px", "150px", "150px", "150px");
$userListTableColumnCount: length($userListTableColumns);
$userListGridAreas: "name email fines isLibrarian numOfBooksOut controls";
$userList: (
  "columns": $userListTableColumns,
  "columnWidth": $userListTableColumnWidth,
  "columnCount": $userListTableColumnCount,
  "gridAreas": $userListGridAreas
);

$librariesTableColumns: ("image", "branch", "address", "hours", "controls");
$librariesTableColumnWidth: ("233px", "150px", "150px", "150px", "150px");
$librariesTableColumnCount: length($librariesTableColumns);
$librariesGridAreas: "image branch address hours controls";
$libraries: (
  "columns": $librariesTableColumns,
  "columnWidth": $librariesTableColumnWidth,
  "columnCount": $librariesTableColumnCount,
  "gridAreas": $librariesGridAreas
);

$tables: (
  "book": $book,
  "work": $work,
  "transit": $transit,
  "copy": $copy,
  "waitlist": $waitlist,
  "checkout": $checkout,
  "profile-checkout": $profileCheckout,
  "profile-pickup": $profilePickup,
  "profile-transit": $profileTransit,
  "profile-waitlist": $profileWaitlist,
  "profile-prev-checkout": $profilePrevCheckout,
  "user-list": $userList,
  "libraries": $libraries,
);
$tableList: (
  "book",
  "work",
  "transit",
  "copy",
  "waitlist",
  "checkout",
  "profile-checkout",
  "profile-pickup",
  "profile-transit",
  "profile-waitlist",
  "profile-prev-checkout",
  "user-list",
  "libraries"
);

/**
* @return new string with the original repeated $n times
*
*/
@mixin gridTemplateAreaConstructor($areas, $string, $n, $property) {
  $temp: "";
  @for $i from 1 through $n {
    $temp: $temp + " " + $string;
  }

  #{$property}: $areas $temp;
}

@mixin tableGenerationEngine($tables, $tableList) {
  $count: length($tableList);
  @for $i from 1 to $count + 1 {
    $currentMap: map-get(
      $map: $tables,
      $key: nth($tableList, $i)
    );

    $currentMapColumnCount: map-get(
      $map: $currentMap,
      $key: "columnCount"
    );
    $currentMapColumnWidth: map-get(
      $map: $currentMap,
      $key: "columnWidth"
    );
    $currentMapColumns: map-get(
      $map: $currentMap,
      $key: "columns"
    );
    $currentMapGridAreas: map-get(
      $map: $currentMap,
      $key: "gridAreas"
    );
    .#{unquote(nth($tableList, $i))}-table {
      .table {
        &-head {
          grid-template-columns: repeat($currentMapColumnCount, 1fr);
          @include gridTemplateAreaConstructor(
            $currentMapGridAreas,
            "divider",
            $currentMapColumnCount,
            grid-template-areas
          );
          &__item {
            @for $i from 1 to $currentMapColumnCount {
              &:nth-chuld(#{$i}) {
                width: unquote(nth($currentMapColumnWidth, $i));
                grid-area: unquote(nth($currentMapColumns, $i));
              }
            }
          }
        }

        &-body {
          &__row {
            grid-template-columns: repeat($currentMapColumnCount, 1fr);
            @include gridTemplateAreaConstructor(
              $currentMapGridAreas,
              "divider",
              $currentMapColumnCount,
              grid-template-areas
            );
            &__item {
              @for $i from 1 to $currentMapColumnCount {
                &:nth-chuld(#{$i}) {
                  width: unquote(nth($currentMapColumnWidth, $i));
                  grid-area: unquote(nth($currentMapColumns, $i));
                }
              }
            }
          }
        }
      }
    }
  }
}

@include tableGenerationEngine($tables, $tableList);

//general table styles
.table {
  overflow: unset;
  border-radius: 5px;
  display: flex;
  flex-flow: column wrap;
  padding: 1em;
  padding-top: 0;
  background-color: $light-grey;
  &-caption {
    font-family: "vollkorn_bold";
    color: $pink;
    font-size: 1.5em;
    margin: 1em 0;
    padding: 0.5em 0;
    a {
      margin-left: 1em;
      font-size: 0.5em;
    }
  }
  &-head {
    display: grid;
    grid-gap: 1em;
    padding: 0.5em;
    border-bottom: 2px solid $black;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
    &__item {
      font-family: "ibm_plex_bold";
      color: $black;
      text-transform: uppercase;
    }
  }
  &-body {
    &__row {
      display: grid;
      grid-template-rows: 1fr 0.5em;
      grid-gap: 1em;
      padding: 0.5em;
      &:last-child {
        border-bottom-left-radius: 5px;
        border-bottom-right-radius: 5px;
        hr {
          display: none;
        }
      }
      &-column {
        padding-right: 0.5em;
        font-size: 0.9em;
        img {
          border-radius: 5px;
        }
        p {
          font-family: "ibm_plex_light";
          color: $black;
        }

        a {
          color: $black;
          font-family: "ibm_plex_regular";
          text-transform: uppercase;
          margin-bottom: 0.5em;
          text-decoration: none;
          padding: 0.2em 0.5em;
          border-radius: 5px;
          text-align: center;
          &:last-child {
            margin-bottom: none;
          }
        }

        .btn {
          &__show {
            background-color: $white;
          }

          &__edit {
            background-color: $yellow;
          }

          &__delete {
            background-color: $pink;
          }
        }
      }
      &-divider {
        grid-area: divider;
        width: 100%;
        border-width: 2px;
        border-color: black;
        margin: 0.5em 0;
      }
      &-buttons {
        display: flex;
        flex-flow: column wrap;
        width: 100%;
        & > a:first-child {
          width: 100%;
        }
      }
    }
  }
  &-pagination {
    .pagination {
      .active {
        a {
          font-family: "ibm_plex_bold";
          background-color: $pink;
          border-color: $pink;
          color: $black;
        }
      }

      li {
        a {
          font-family: "ibm_plex_bold";
          background-color: $grey;
          border-color: $grey;
          color: $black;
        }
      }
    }
  }
}

@include mq-tablet {
  body {
    overflow: scroll;
  }

  .table {
    img {
      width: 100%;
    }
  }
}
